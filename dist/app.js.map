{"version":3,"sources":["webpack://vuex-keg/webpack/universalModuleDefinition","webpack://vuex-keg/webpack/bootstrap","webpack://vuex-keg/external \"lodash\"","webpack://vuex-keg/./src/Keg.ts","webpack://vuex-keg/./src/types.ts","webpack://vuex-keg/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Keg","options","_options","tap","injectedAction","_a","only","_b","except","keg","__assign","sKeg","kegRunner","plugins","beers","myPlugins","assign","store","agedPlugins","external_lodash_","plugin","_agePlugins","context","payload","Error","_context","src_assign","openedPlugins","_openPlugins","console","error","Array","isArray","actions_1","keys","forEach"],"mappings":"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","file":"app.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"lodash\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"vuex-keg\", [\"lodash\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"vuex-keg\"] = factory(require(\"lodash\"));\n\telse\n\t\troot[\"vuex-keg\"] = factory(root[\"lodash\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import {keg} from './'\r\nimport {ActionHandler, IKegOptions, TInjectedFunction} from './types'\r\n\r\n/**\r\n * Vuex custom utils container class\r\n */\r\nexport default class Keg {\r\n  private _options: IKegOptions\r\n  constructor(options: IKegOptions = {}) {\r\n    this._options = options\r\n  }\r\n\r\n  /**\r\n   * use custom utils\r\n   */\r\n  tap(\r\n    injectedAction: {[name: string]: TInjectedFunction} | TInjectedFunction,\r\n    options: IKegOptions = {},\r\n  ): {[name: string]: ActionHandler<any, any>} | ActionHandler<any, any> {\r\n    const {_options} = this\r\n    const {only = _options.only, except = _options.except} = options\r\n    return keg(injectedAction, {only, except})\r\n  }\r\n\r\n  /**\r\n   * change default options\r\n   */\r\n  set options(options: IKegOptions) {\r\n    this._options = options\r\n  }\r\n\r\n  /**\r\n   * get default options\r\n   */\r\n  get options(): IKegOptions {\r\n    return {...this._options}\r\n  }\r\n}\r\n","import {ActionContext, Commit, Dispatch, Store} from 'vuex'\r\n\r\nexport type TOpenedPlugin = (...any: any[]) => any\r\n\r\nexport type TPlugin = (store: Store<any>) => TAgedPlugin\r\n\r\nexport type TAgedPlugin = (\r\n  context: ActionContext<any, any>,\r\n  payload: any,\r\n) => TOpenedPlugin\r\n\r\nexport type TInjectedFunction = (\r\n  context: IFnContext,\r\n  payload: any,\r\n) => any\r\n\r\nexport type TKegReturn = (store: IKegStore<any>) => void\r\n\r\n// since vuex not updated for this yet, I defined this\r\nexport type ActionHandler<S, R> = (injectee: ActionContext<S, R>, payload: any) => any\r\n\r\nexport interface IFnContext{\r\n  dispatch: Dispatch\r\n  commit: Commit\r\n  state: any\r\n  getters: any\r\n  rootState: any\r\n  rootGetters: any\r\n  name: string\r\n  [plugin: string]: TOpenedPlugin | any\r\n}\r\n\r\nexport const sKeg = Symbol('keg')\r\n\r\nexport interface IVuexKegOptions {\r\n  plugins?: IPlugins\r\n  beers?: IPlugins // = plugins\r\n}\r\n\r\nexport interface IKegOptions {\r\n  only?: string[]\r\n  except?: string[]\r\n  // when?: () => Promise<any> next feather\r\n}\r\n\r\nexport interface IPlugins {\r\n  [name: string]: TPlugin\r\n}\r\n\r\nexport interface IAgedPlugins {\r\n  [name: string]: TAgedPlugin\r\n}\r\n\r\nexport interface IOpenedPlugins {\r\n  [name: string]: TOpenedPlugin\r\n}\r\n\r\nexport interface IKegStore<T> extends Store<T>{\r\n  [sKeg]: IAgedPlugins\r\n}\r\n","import {forEach, omit, pick} from 'lodash'\r\nimport {ActionContext, Store} from 'vuex/types'\r\nimport Keg from './Keg'\r\nimport {\r\n  ActionHandler,\r\n  IAgedPlugins,\r\n  IKegOptions,\r\n  IKegStore,\r\n  IOpenedPlugins,\r\n  IPlugins,\r\n  IVuexKegOptions,\r\n  sKeg,\r\n  TAgedPlugin,\r\n  TInjectedFunction,\r\n  TKegReturn,\r\n  TPlugin,\r\n} from './types'\r\nexport {Keg, sKeg}\r\n\r\n/**\r\n * call plugins with store\r\n */\r\nconst _agePlugins = (plugins: IPlugins, store: Store<any>): IAgedPlugins => {\r\n  const agedPlugins: IAgedPlugins = {}\r\n  forEach(plugins, (plugin: TPlugin, key: string) => {\r\n    agedPlugins[key] = plugin(store)\r\n  })\r\n  return agedPlugins\r\n}\r\n\r\n/**\r\n * call aged plugins with context and payload of an action\r\n */\r\nconst _openPlugins = (\r\n  agedPlugins: IAgedPlugins,\r\n  context: ActionContext<any, any>,\r\n  payload: any,\r\n): IOpenedPlugins => {\r\n  const openedPlugins: IOpenedPlugins = {}\r\n  forEach(agedPlugins, (plugin: TAgedPlugin, key: string) => {\r\n    openedPlugins[key] = plugin(context, payload)\r\n  })\r\n  return openedPlugins\r\n}\r\n\r\n/**\r\n * Vuex keg plugin\r\n */\r\nexport default (options: IVuexKegOptions = {}): TKegReturn => {\r\n  const {plugins = {}, beers = {}} = options\r\n  const myPlugins: IPlugins = {}\r\n  Object.assign(myPlugins, plugins, beers)\r\n  return (store: IKegStore<any>) => {\r\n    store[sKeg] = _agePlugins(myPlugins, store)\r\n  }\r\n}\r\n\r\n/**\r\n * Vuex custom utils container function\r\n */\r\nexport const kegRunner = (\r\n  name: string,\r\n  injectedAction: TInjectedFunction,\r\n  options: IKegOptions = {},\r\n): ActionHandler<any, any> => {\r\n  return function kegTap(context, payload) {\r\n    let myPlugins: {[name: string]: TAgedPlugin} = this[sKeg]\r\n    if(!myPlugins){\r\n      throw new Error('[vuex-keg] keg-plugin is undefined in Store')\r\n    }\r\n    const {only, except} = options\r\n    if(except){\r\n      myPlugins = omit(myPlugins, except)\r\n    }\r\n    if(only){\r\n      myPlugins = pick(myPlugins, only)\r\n    }\r\n    const _context = {...context, name}\r\n    const plugins = _openPlugins(myPlugins, _context, payload)\r\n    return injectedAction({...plugins, ..._context}, payload)\r\n  }\r\n}\r\n\r\nexport const keg = (\r\n  injectedAction: {[name: string]: TInjectedFunction} | TInjectedFunction,\r\n  options?: IKegOptions,\r\n): {[name: string]: ActionHandler<any, any>} | ActionHandler<any, any> => {\r\n  if(typeof injectedAction === 'function'){\r\n    console.error('deprecated using like that')\r\n    return kegRunner('unknown', injectedAction, options)\r\n  }\r\n  if(!Array.isArray(injectedAction) && typeof injectedAction === 'object'){\r\n    const actions: {[name: string]: ActionHandler<any, any>} = {}\r\n    Object.keys(injectedAction).forEach((key) => {\r\n      actions[key] = kegRunner(key, injectedAction[key], options)\r\n    })\r\n    return actions\r\n  }\r\n  throw new Error('[vuex-keg] only support object & function')\r\n}\r\n"],"sourceRoot":""}